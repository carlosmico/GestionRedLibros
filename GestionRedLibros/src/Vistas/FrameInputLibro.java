/*
 * Copyright (C) 2019 Jose Sanchis
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package Vistas;

import Daos.*;
import Pojos.*;
import Utilidades.*;
import Renders.comboBoxRender;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.SwingWorker;

/**
 *
 * @author Jose Sanchis
 */
public class FrameInputLibro extends javax.swing.JFrame {

    /**
     * Creates new form FrameDevoluciones
     */
    /**
     * Modos de busqueada: - busquedaPorCodigo = true: por codigo del libro
     * (codigo de barras) - busquedaPorCodigo = false: por nombre del libro
     * (debe ser exacto)
     *
     * "Por defecto el modo de busqueda es el true, es decir, por el codigo del
     * libro"
     */
    public boolean buscquedaPorCodigo = true;
    public boolean isLoading = false;

    private FrameLibro gestLibro = null;
    private FrameCarga frameCarga = null;
    private FrameEjemplares gestEjemplar = null;

    DaoLibro daoLibro;
    DaoCurso daoCurso;

    private Libro l;

    private boolean isLibroMode;

    private List<Libro> listaLibros;
    private List<Curso> listaCursos;

    public FrameInputLibro(boolean isLibro) {
        initComponents();

        this.isLibroMode = isLibro;

        textErrorBusqueda.setText("");

        setModoDeBusqueda(buscquedaPorCodigo);

        this.setLocationRelativeTo(null);

        textCodigoLibro.requestFocusInWindow();

        daoLibro = new DaoLibro(Main.gestorSesiones.getSession());
        daoCurso = new DaoCurso(Main.gestorSesiones.getSession());

        //<editor-fold defaultstate="collapsed" desc="configuracion Combobox">
        cbCurso.setUI(new comboBoxRender());
        cbCurso.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(
                    JList list, Object value, int index,
                    boolean isSelected, boolean hasFocus) {
                JLabel l = (JLabel) super.getListCellRendererComponent(
                        list, value, index, isSelected, hasFocus);
                if (isSelected) {
                    l.setForeground(Colores.fondo);
                    l.setBackground(Colores.buttons);
                } else {
                    l.setForeground(Colores.buttons);
                    l.setBackground(Colores.fondo);
                }
                return l;
            }
        });
//</editor-fold>
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        head = new javax.swing.JPanel();
        textTitleFrame = new javax.swing.JLabel();
        btnNew = new com.mommoo.flat.button.FlatButton();
        bodyCode = new javax.swing.JPanel();
        textTitle = new javax.swing.JLabel();
        textCodigoLibro = new javax.swing.JTextField();
        btnBuscar = new com.mommoo.flat.button.FlatButton();
        textErrorBusqueda = new javax.swing.JLabel();
        bodyListado = new javax.swing.JPanel();
        textTitle1 = new javax.swing.JLabel();
        textNombreLibro = new javax.swing.JTextField();
        cbCurso = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistResultadoLibros = new javax.swing.JList();
        botonera = new javax.swing.JPanel();
        btnCancel = new com.mommoo.flat.button.FlatButton();
        btnChangeMethod = new com.mommoo.flat.button.FlatButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión Libros");
        setBackground(new java.awt.Color(239, 235, 233));
        setMaximumSize(new java.awt.Dimension(566, 645));
        setMinimumSize(new java.awt.Dimension(569, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        head.setBackground(new java.awt.Color(58, 39, 35));
        head.setPreferredSize(new java.awt.Dimension(135, 75));

        textTitleFrame.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        textTitleFrame.setForeground(new java.awt.Color(204, 204, 204));
        textTitleFrame.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textTitleFrame.setText("Gestión libros");

        btnNew.setBackground(new java.awt.Color(66, 47, 44));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons/plus.png"))); // NOI18N
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout headLayout = new javax.swing.GroupLayout(head);
        head.setLayout(headLayout);
        headLayout.setHorizontalGroup(
            headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textTitleFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );
        headLayout.setVerticalGroup(
            headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(textTitleFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(headLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bodyCode.setBackground(new java.awt.Color(239, 235, 233));

        textTitle.setBackground(new java.awt.Color(51, 51, 51));
        textTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        textTitle.setForeground(new java.awt.Color(51, 51, 51));
        textTitle.setText("Codigo de barras:");
        textTitle.setToolTipText("");

        textCodigoLibro.setBackground(new java.awt.Color(239, 235, 233));
        textCodigoLibro.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        textCodigoLibro.setForeground(new java.awt.Color(51, 51, 51));
        textCodigoLibro.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textCodigoLibro.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));
        textCodigoLibro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textCodigoLibroKeyPressed(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(66, 47, 44));
        btnBuscar.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons/magnify.png"))); // NOI18N
        btnBuscar.setCornerRound(10);
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        textErrorBusqueda.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        textErrorBusqueda.setForeground(new java.awt.Color(255, 102, 102));
        textErrorBusqueda.setText("No existe ningún libro con este codigo");

        javax.swing.GroupLayout bodyCodeLayout = new javax.swing.GroupLayout(bodyCode);
        bodyCode.setLayout(bodyCodeLayout);
        bodyCodeLayout.setHorizontalGroup(
            bodyCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyCodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bodyCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bodyCodeLayout.createSequentialGroup()
                        .addComponent(textTitle)
                        .addGap(0, 376, Short.MAX_VALUE))
                    .addGroup(bodyCodeLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(bodyCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bodyCodeLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(textErrorBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(textCodigoLibro))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        bodyCodeLayout.setVerticalGroup(
            bodyCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyCodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bodyCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(textCodigoLibro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textErrorBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bodyListado.setBackground(new java.awt.Color(239, 235, 233));
        bodyListado.setMaximumSize(new java.awt.Dimension(511, 402));

        textTitle1.setBackground(new java.awt.Color(51, 51, 51));
        textTitle1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        textTitle1.setForeground(new java.awt.Color(51, 51, 51));
        textTitle1.setText("Listado de libros:");
        textTitle1.setToolTipText("");

        textNombreLibro.setBackground(new java.awt.Color(239, 235, 233));
        textNombreLibro.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        textNombreLibro.setForeground(new java.awt.Color(102, 102, 102));
        textNombreLibro.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textNombreLibro.setText("Escribe nombre del libro...");
        textNombreLibro.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 51, 51)));
        textNombreLibro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textNombreLibroKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textNombreLibroKeyReleased(evt);
            }
        });

        cbCurso.setBackground(new java.awt.Color(51, 51, 51));
        cbCurso.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        cbCurso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar curso" }));
        cbCurso.setMaximumSize(new java.awt.Dimension(187, 34));
        cbCurso.setPreferredSize(new java.awt.Dimension(250, 34));
        cbCurso.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCursoItemStateChanged(evt);
            }
        });

        jlistResultadoLibros.setBackground(new java.awt.Color(239, 235, 233));
        jlistResultadoLibros.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jlistResultadoLibros.setForeground(new java.awt.Color(51, 51, 51));
        jlistResultadoLibros.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "mates", "castellano", "valencia" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jlistResultadoLibros.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlistResultadoLibros.setSelectionBackground(Colores.buttons);
        jlistResultadoLibros.setSelectionForeground(Colores.fondo);
        jlistResultadoLibros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlistResultadoLibrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jlistResultadoLibros);

        javax.swing.GroupLayout bodyListadoLayout = new javax.swing.GroupLayout(bodyListado);
        bodyListado.setLayout(bodyListadoLayout);
        bodyListadoLayout.setHorizontalGroup(
            bodyListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bodyListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(bodyListadoLayout.createSequentialGroup()
                        .addComponent(textTitle1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bodyListadoLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(textNombreLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbCurso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bodyListadoLayout.setVerticalGroup(
            bodyListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textTitle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bodyListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textNombreLibro, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(cbCurso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        botonera.setBackground(new java.awt.Color(239, 235, 233));

        btnCancel.setBackground(new java.awt.Color(66, 47, 44));
        btnCancel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnCancel.setText("Cancelar");
        btnCancel.setCornerRound(10);
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setPreferredSize(new java.awt.Dimension(141, 30));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnChangeMethod.setBackground(new java.awt.Color(66, 47, 44));
        btnChangeMethod.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnChangeMethod.setText("Listar libros");
        btnChangeMethod.setCornerRound(10);
        btnChangeMethod.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnChangeMethod.setPreferredSize(new java.awt.Dimension(248, 30));
        btnChangeMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeMethodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout botoneraLayout = new javax.swing.GroupLayout(botonera);
        botonera.setLayout(botoneraLayout);
        botoneraLayout.setHorizontalGroup(
            botoneraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoneraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnChangeMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        botoneraLayout.setVerticalGroup(
            botoneraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, botoneraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(botoneraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChangeMethod, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(head, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addComponent(bodyCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(botonera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bodyListado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(head, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(bodyCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bodyListado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(botonera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnChangeMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeMethodActionPerformed
        // TODO add your handling code here:
        buscquedaPorCodigo = !buscquedaPorCodigo;
        setModoDeBusqueda(buscquedaPorCodigo);
    }//GEN-LAST:event_btnChangeMethodActionPerformed

    private void textNombreLibroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNombreLibroKeyReleased
        //Metodo del placeholder en la busqueda del listado
        String nombreLibro = textNombreLibro.getText();

        if (nombreLibro.length() == 0) {
            textNombreLibro.setText("Escribe nombre del libro...");
            textNombreLibro.setForeground(new Color(102, 102, 102));
        }

        filtroListaLibro(textNombreLibro.getText(), cbCurso.getSelectedItem().toString());
    }//GEN-LAST:event_textNombreLibroKeyReleased

    private void textNombreLibroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNombreLibroKeyPressed
        //Metodo del placeholder en la busqueda del listado
        String nombreLibro = textNombreLibro.getText();

        if (nombreLibro.length() > 0 && nombreLibro.equals("Escribe nombre del libro...")) {
            textNombreLibro.setText("");
            textNombreLibro.setForeground(new Color(51, 51, 51));
        }
    }//GEN-LAST:event_textNombreLibroKeyPressed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        //Pulsación en el boton de nuevo libro
        this.setVisible(false);
        if (gestLibro == null) {
            gestLibro = new FrameLibro(null);
        }
        gestLibro.setVisible(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void cbCursoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCursoItemStateChanged
        // TODO add your handling code here:
        filtroListaLibro(textNombreLibro.getText(), cbCurso.getSelectedItem().toString());
    }//GEN-LAST:event_cbCursoItemStateChanged

    private void jlistResultadoLibrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlistResultadoLibrosMouseClicked
        // TODO add your handling code here:
        String nombreLibro = jlistResultadoLibros.getSelectedValue().toString();
        Libro libroSelect = listaLibros.stream().filter(libro -> libro.getNombre().equals(nombreLibro)).collect(Collectors.toList()).get(0);
        buscarLibro(libroSelect.getCodigo());
    }//GEN-LAST:event_jlistResultadoLibrosMouseClicked

    private void textCodigoLibroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textCodigoLibroKeyPressed
        // TODO add your handling code here:
        if (textCodigoLibro.hasFocus()) {
            textCodigoLibro.addKeyListener(new KeyAdapter() {
                public void keyPressed(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        if (!isLoading) {
                            buscarLibro(textCodigoLibro.getText());
                            isLoading = true;
                        }
                    }
                }
            });
        }
    }//GEN-LAST:event_textCodigoLibroKeyPressed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        if (!isLoading) {
            buscarLibro(textCodigoLibro.getText());
            isLoading = true;
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        try {
            daoCurso.desconectar();
            daoLibro.desconectar();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameDevoluciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameDevoluciones().setVisible(true);
            }
        });
    }

    public void setModoDeBusqueda(boolean modoBusqueda) {

        if (modoBusqueda) {
            //Por codigo
            bodyCode.setVisible(modoBusqueda);
            bodyListado.setVisible(!modoBusqueda);
            btnChangeMethod.setText("Listado de libros");
        } else {
            //Por nombre
            SwingWorker<?, ?> worker = new SwingWorker<Void, Integer>() {
                protected Void doInBackground() throws InterruptedException {
                    listaLibros = daoLibro.buscarTodos();
                    listaCursos = daoCurso.buscarTodos();
                    return null;
                }

                protected void process(List<Integer> chunks) {
                }

                protected void done() {
                    filtroListaLibro(textNombreLibro.getText(), cbCurso.getSelectedItem().toString());

                    for (int i = 0; i < listaCursos.size(); i++) {
                        cbCurso.addItem(listaCursos.get(i).getAbreviatura() + " - " + listaCursos.get(i).getNombre_cas());
                    }

                    btnChangeMethod.setText("Buscar por código");
                    bodyCode.setVisible(modoBusqueda);
                    bodyListado.setVisible(!modoBusqueda);
                    frameCarga.dispose();
                    pack();
                }
            };
            worker.execute();
            if (frameCarga == null) {
                frameCarga = new FrameCarga();
            }
            frameCarga.setVisible(true);
        }
        this.pack();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bodyCode;
    private javax.swing.JPanel bodyListado;
    private javax.swing.JPanel botonera;
    private com.mommoo.flat.button.FlatButton btnBuscar;
    private com.mommoo.flat.button.FlatButton btnCancel;
    private com.mommoo.flat.button.FlatButton btnChangeMethod;
    private com.mommoo.flat.button.FlatButton btnNew;
    private javax.swing.JComboBox cbCurso;
    private javax.swing.JPanel head;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jlistResultadoLibros;
    public javax.swing.JTextField textCodigoLibro;
    public javax.swing.JLabel textErrorBusqueda;
    private javax.swing.JTextField textNombreLibro;
    private javax.swing.JLabel textTitle;
    private javax.swing.JLabel textTitle1;
    public javax.swing.JLabel textTitleFrame;
    // End of variables declaration//GEN-END:variables

    private void buscarLibro(String codigo) {
        if (!codigo.equals("")) {
            //Se ha insertado un codigo
            SwingWorker<?, ?> worker = new SwingWorker<Void, Integer>() {
                protected Void doInBackground() throws InterruptedException {
                    l = daoLibro.buscar(codigo);
                    return null;
                }

                protected void process(List<Integer> chunks) {
                }

                protected void done() {
                    if (l != null) {
                        dispose();
                        if (isLibroMode) {
                            if (gestLibro == null) {
                                gestLibro = new FrameLibro(l);
                            }
                            gestLibro.setVisible(true);
                        } else {
                            if (gestEjemplar == null) {
                                gestEjemplar = new FrameEjemplares(l);
                            }
                            gestEjemplar.setVisible(true);
                        }
                    } else {
                        textErrorBusqueda.setVisible(true);
                        textErrorBusqueda.setText("No existen libros con este código.");
                        isLoading = false;
                    }

                    frameCarga.dispose();
                }
            };
            worker.execute();
            if (frameCarga == null) {
                frameCarga = new FrameCarga();
            }
            frameCarga.setVisible(true);
        } else {
            //No se ha insertado ningun valor en el campo de texto
            textErrorBusqueda.setVisible(true);
            textErrorBusqueda.setText("El código no puede ser un campo vacío.");
            textCodigoLibro.setText("");
        }

    }

    private void filtroListaLibro(String textoNombre, String textoCurso) {
        List<Libro> listaFiltroLibros = listaLibros;

        String n, c, resFiltro = "";

        //<editor-fold defaultstate="collapsed" desc="Clasificacion del filtro">
        if (textoNombre.equals("Escribe nombre del libro...")) {
            n = "0";
        } else {
            n = "1";
        }

        if (textoCurso.equals("Seleccionar curso")) {
            c = "0";
        } else {
            c = "1";
        }

        resFiltro = n + c;
        //</editor-fold>

        if (listaLibros.size() > 0) {
            jlistResultadoLibros.setEnabled(true);
            switch (resFiltro) {
                case "00":
                    //Se muestran todos los libros de todos los cursos
                    //listaFiltroLibros = listaLibros;
                    asignarModeloToList(jlistResultadoLibros, listaFiltroLibros);
                    break;

                case "01":
                    //Se muestran los libros del curso seleccionado
                    listaFiltroLibros = listaLibros.stream().filter(libro -> (libro.getContenido().getCurso().getAbreviatura().toUpperCase() + " - " + libro.getContenido().getCurso().getNombre_cas()).equals(textoCurso.toUpperCase())).collect(Collectors.toList());
                    break;

                case "10":
                    //Se seleccionan los libros del nombre escrito
                    listaFiltroLibros = listaLibros.stream().filter(libro -> libro.getNombre().toUpperCase().contains(textoNombre.toUpperCase())).collect(Collectors.toList());
                    break;

                case "11":
                    //se seleccionan los libros del curso seleccionado con el nombre escrito
                    listaFiltroLibros = listaLibros.stream().filter(libro -> libro.getNombre().toUpperCase().contains(textoNombre.toUpperCase())).collect(Collectors.toList());
                    listaFiltroLibros = listaFiltroLibros.stream().filter(libro -> (libro.getContenido().getCurso().getAbreviatura().toUpperCase() + " - " + libro.getContenido().getCurso().getNombre_cas()).equals(textoCurso.toUpperCase())).collect(Collectors.toList());
                    break;
            }

            if (listaFiltroLibros.size() > 0) {
                asignarModeloToList(jlistResultadoLibros, listaFiltroLibros);
            } else {
                DefaultListModel listModel = new DefaultListModel();
                listModel.addElement("No existen libros con este nombre");
                jlistResultadoLibros.setModel(listModel);
                jlistResultadoLibros.setEnabled(false);
            }
        } else {
            DefaultListModel listModel = new DefaultListModel();
            listModel.addElement("No existen libros en la base de datos");
            jlistResultadoLibros.setModel(listModel);
            jlistResultadoLibros.setEnabled(false);
        }
    }

    private void asignarModeloToList(JList jlist, List<Libro> lista) {
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < lista.size(); i++) {
            listModel.addElement(lista.get(i).getNombre());
        }
        jlist.setModel(listModel);
    }
}
